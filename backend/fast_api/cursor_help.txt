|
 |  add_option(self, mask: int) -> 'Cursor[_DocumentType]'
 |      Set arbitrary query flags using a bitmask.
 |
 |      To set the tailable flag:
 |      cursor.add_option(2)
 |
 |  allow_disk_use(self, allow_disk_use: bool) -> 'Cursor[_DocumentType]'
 |      Specifies whether MongoDB can use temporary disk files while
 |      processing a blocking sort operation.
 |
 |      Raises :exc:`TypeError` if `allow_disk_use` is not a boolean.
 |
 |      .. note:: `allow_disk_use` requires server version **>= 4.4**
 |
 |      :Parameters:
 |        - `allow_disk_use`: if True, MongoDB may use temporary
 |          disk files to store data exceeding the system memory limit while
 |          processing a blocking sort operation.
 |
 |      .. versionadded:: 3.11
 |
 |  collation(self, collation: Union[Mapping[str, Any], ForwardRef('Collation'), NoneType]) -> 'Cursor[_DocumentType]'
 |      Adds a :class:`~pymongo.collation.Collation` to this query.
 |
 |      Raises :exc:`TypeError` if `collation` is not an instance of
 |      :class:`~pymongo.collation.Collation` or a ``dict``. Raises
 |      :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has
 |      already been used. Only the last collation applied to this cursor has
 |      any effect.
 |
 |      :Parameters:
 |        - `collation`: An instance of :class:`~pymongo.collation.Collation`.
 |
 |  comment(self, comment: Any) -> 'Cursor[_DocumentType]'
 |      Adds a 'comment' to the cursor.
 |
 |      http://mongodb.com/docs/manual/reference/operator/comment/
 |
 |      :Parameters:
 |        - `comment`: A string to attach to the query to help interpret and
 |          trace the operation in the server logs and in profile data.
 |
 |      .. versionadded:: 2.7
 |
 |  distinct(self, key: str) -> List
 |      Get a list of distinct values for `key` among all documents
 |      in the result set of this query.
 |
 |      Raises :class:`TypeError` if `key` is not an instance of
 |      :class:`basestring` (:class:`str` in python 3).
 |
 |      The :meth:`distinct` method obeys the
 |      :attr:`~pymongo.collection.Collection.read_preference` of the
 |      :class:`~pymongo.collection.Collection` instance on which
 |      :meth:`~pymongo.collection.Collection.find` was called.
 |
 |      :Parameters:
 |        - `key`: name of key for which we want to get the distinct values
 |
 |      .. seealso:: :meth:`pymongo.collection.Collection.distinct`
 |
 |  explain(self) -> ~_DocumentType
 |      Returns an explain plan record for this cursor.
 |
 |      .. note:: This method uses the default verbosity mode of the
 |        `explain command
 |        <https://mongodb.com/docs/manual/reference/command/explain/>`_,
 |        ``allPlansExecution``. To use a different verbosity use
 |        :meth:`~pymongo.database.Database.command` to run the explain
 |        command directly.
 |
 |      .. seealso:: The MongoDB documentation on `explain <https://dochub.mongodb.org/core/explain>`_.
 |
 |  hint(self, index: Union[str, Sequence[Tuple[str, Union[int, str, Mapping[str, Any]]]], NoneType]) -> 'Cursor[_DocumentType]'
 |      Adds a 'hint', telling Mongo the proper index to use for the query.
 |
 |      Judicious use of hints can greatly improve query
 |      performance. When doing a query on multiple fields (at least
 |      one of which is indexed) pass the indexed field as a hint to
 |      the query. Raises :class:`~pymongo.errors.OperationFailure` if the
 |      provided hint requires an index that does not exist on this collection,
 |      and raises :class:`~pymongo.errors.InvalidOperation` if this cursor has
 |      already been used.
 |
 |      `index` should be an index as passed to
 |      :meth:`~pymongo.collection.Collection.create_index`
 |      (e.g. ``[('field', ASCENDING)]``) or the name of the index.
 |      If `index` is ``None`` any existing hint for this query is
 |      cleared. The last hint applied to this cursor takes precedence
 |      over all others.
 |
 |      :Parameters:
 |        - `index`: index to hint on (as an index specifier)
 |
 |  limit(self, limit: int) -> 'Cursor[_DocumentType]'
 |      Limits the number of results to be returned by this cursor.
 |
 |      Raises :exc:`TypeError` if `limit` is not an integer. Raises
 |      :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor`
 |      has already been used. The last `limit` applied to this cursor
 |      takes precedence. A limit of ``0`` is equivalent to no limit.
 |
 |      :Parameters:
 |        - `limit`: the number of results to return
 |
 |      .. seealso:: The MongoDB documentation on `limit <https://dochub.mongodb.org/core/limit>`_.
 |
 |  max(self, spec: Sequence[Tuple[str, Union[int, str, Mapping[str, Any]]]]) -> 'Cursor[_DocumentType]'
 |      Adds ``max`` operator that specifies upper bound for specific index.
 |
 |      When using ``max``, :meth:`~hint` should also be configured to ensure
 |      the query uses the expected index and starting in MongoDB 4.2
 |      :meth:`~hint` will be required.
 |
 |      :Parameters:
 |        - `spec`: a list of field, limit pairs specifying the exclusive
 |          upper bound for all keys of a specific index in order.
 |
 |      .. versionchanged:: 3.8
 |         Deprecated cursors that use ``max`` without a :meth:`~hint`.
 |
 |      .. versionadded:: 2.7
 |
 |  max_await_time_ms(self, max_await_time_ms: Optional[int]) -> 'Cursor[_DocumentType]'
 |      Specifies a time limit for a getMore operation on a
 |      :attr:`~pymongo.cursor.CursorType.TAILABLE_AWAIT` cursor. For all other
 |      types of cursor max_await_time_ms is ignored.
 |
 |      Raises :exc:`TypeError` if `max_await_time_ms` is not an integer or
 |      ``None``. Raises :exc:`~pymongo.errors.InvalidOperation` if this
 |      :class:`Cursor` has already been used.
 |
 |      .. note:: `max_await_time_ms` requires server version **>= 3.2**
 |
 |      :Parameters:
 |        - `max_await_time_ms`: the time limit after which the operation is
 |          aborted
 |
 |      .. versionadded:: 3.2
 |
 |  max_scan(self, max_scan: Optional[int]) -> 'Cursor[_DocumentType]'
 |      **DEPRECATED** - Limit the number of documents to scan when
 |      performing the query.
 |
 |      Raises :class:`~pymongo.errors.InvalidOperation` if this
 |      cursor has already been used. Only the last :meth:`max_scan`
 |      applied to this cursor has any effect.
 |
 |      :Parameters:
 |        - `max_scan`: the maximum number of documents to scan
 |
 |      .. versionchanged:: 3.7
 |        Deprecated :meth:`max_scan`. Support for this option is deprecated in
 |        MongoDB 4.0. Use :meth:`max_time_ms` instead to limit server side
 |        execution time.
 |
 |  max_time_ms(self, max_time_ms: Optional[int]) -> 'Cursor[_DocumentType]'
 |      Specifies a time limit for a query operation. If the specified
 |      time is exceeded, the operation will be aborted and
 |      :exc:`~pymongo.errors.ExecutionTimeout` is raised. If `max_time_ms`
 |      is ``None`` no limit is applied.
 |
 |      Raises :exc:`TypeError` if `max_time_ms` is not an integer or ``None``.
 |      Raises :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor`
 |      has already been used.
 |
 |      :Parameters:
 |        - `max_time_ms`: the time limit after which the operation is aborted
 |
 |  min(self, spec: Sequence[Tuple[str, Union[int, str, Mapping[str, Any]]]]) -> 'Cursor[_DocumentType]'
 |      Adds ``min`` operator that specifies lower bound for specific index.
 |
 |      When using ``min``, :meth:`~hint` should also be configured to ensure
 |      the query uses the expected index and starting in MongoDB 4.2
 |      :meth:`~hint` will be required.
 |
 |      :Parameters:
 |        - `spec`: a list of field, limit pairs specifying the inclusive
 |          lower bound for all keys of a specific index in order.
 |
 |      .. versionchanged:: 3.8
 |         Deprecated cursors that use ``min`` without a :meth:`~hint`.
 |
 |      .. versionadded:: 2.7
 |
 |  remove_option(self, mask: int) -> 'Cursor[_DocumentType]'
 |      Unset arbitrary query flags using a bitmask.
 |
 |      To unset the tailable flag:
 |      cursor.remove_option(2)
 |
 |  skip(self, skip: int) -> 'Cursor[_DocumentType]'
 |      Skips the first `skip` results of this cursor.
 |
 |      Raises :exc:`TypeError` if `skip` is not an integer. Raises
 |      :exc:`ValueError` if `skip` is less than ``0``. Raises
 |      :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has
 |      already been used. The last `skip` applied to this cursor takes
 |      precedence.
 |
 |      :Parameters:
 |        - `skip`: the number of results to skip
 |
 |  sort(self, key_or_list: Union[str, Sequence[Tuple[str, Union[int, str, Mapping[str, Any]]]]], direction: Union[int, str, NoneType] = None) -> 'Cursor[_DocumentType]'
 |      Sorts this cursor's results.
 |
 |      Pass a field name and a direction, either
 |      :data:`~pymongo.ASCENDING` or :data:`~pymongo.DESCENDING`:
 |
 |      .. testsetup:: sort
 |
 |        MongoClient().test.test_collection.drop()
 |        MongoClient().test.test_collection.insert_many([
 |            {'_id': i, 'field1': i % 2, 'field2': i}
 |            for i in range(5)])
 |        collection = MotorClient().test.test_collection
 |
 |      .. doctest:: sort
 |
 |        >>> async def f():
 |        ...     cursor = collection.find().sort('_id', pymongo.DESCENDING)
 |        ...     docs = await cursor.to_list(None)
 |        ...     print([d['_id'] for d in docs])
 |        ...
 |        >>> IOLoop.current().run_sync(f)
 |        [4, 3, 2, 1, 0]
 |
 |      To sort by multiple fields, pass a list of (key, direction) pairs:
 |
 |      .. doctest:: sort
 |
 |        >>> async def f():
 |        ...     cursor = collection.find().sort([
 |        ...         ('field1', pymongo.ASCENDING),
 |        ...         ('field2', pymongo.DESCENDING)])
 |        ...
 |        ...     docs = await cursor.to_list(None)
 |        ...     print([(d['field1'], d['field2']) for d in docs])
 |        ...
 |        >>> IOLoop.current().run_sync(f)
 |        [(0, 4), (0, 2), (0, 0), (1, 3), (1, 1)]
 |
 |      Text search results can be sorted by relevance:
 |
 |      .. testsetup:: sort_text
 |
 |        MongoClient().test.test_collection.drop()
 |        MongoClient().test.test_collection.insert_many([
 |            {'field': 'words'},
 |            {'field': 'words about some words'}])
 |
 |        MongoClient().test.test_collection.create_index([('field', 'text')])
 |        collection = MotorClient().test.test_collection
 |
 |      .. doctest:: sort_text
 |
 |        >>> async def f():
 |        ...     cursor = collection.find({
 |        ...         '$text': {'$search': 'some words'}},
 |        ...         {'score': {'$meta': 'textScore'}})
 |        ...
 |        ...     # Sort by 'score' field.
 |        ...     cursor.sort([('score', {'$meta': 'textScore'})])
 |        ...     async for doc in cursor:
 |        ...         print('%.1f %s' % (doc['score'], doc['field']))
 |        ...
 |        >>> IOLoop.current().run_sync(f)
 |        1.5 words about some words
 |        1.0 words
 |
 |      Raises :class:`~pymongo.errors.InvalidOperation` if this cursor has
 |      already been used. Only the last :meth:`sort` applied to this
 |      cursor has any effect.
 |
 |      :Parameters:
 |        - `key_or_list`: a single key or a list of (key, direction)
 |          pairs specifying the keys to sort on
 |        - `direction` (optional): only used if `key_or_list` is a single
 |          key, if not given :data:`~pymongo.ASCENDING` is assumed
 |
 |  where(self, code: Union[str, bson.code.Code]) -> 'Cursor[_DocumentType]'
 |      Adds a `$where`_ clause to this query.
 |
 |      The `code` argument must be an instance of :class:`str`
 |      :class:`~bson.code.Code` containing a JavaScript expression.
 |      This expression will be evaluated for each document scanned.
 |      Only those documents for which the expression evaluates to *true*
 |      will be returned as results. The keyword *this* refers to the object
 |      currently being scanned. For example::
 |
 |          # Find all documents where field "a" is less than "b" plus "c".
 |          async for doc in db.test.find().where('this.a < (this.b + this.c)'):
 |              print(doc)
 |
 |      Raises :class:`TypeError` if `code` is not an instance of
 |      :class:`str`. Raises :class:`~pymongo.errors.InvalidOperation`
 |      if this :class:`~motor.motor_tornado.MotorCursor` has already been used.
 |      Only the last call to :meth:`where` applied to a
 |      :class:`~motor.motor_tornado.MotorCursor` has any effect.
 |
 |      .. note:: MongoDB 4.4 drops support for :class:`~bson.code.Code`
 |        with scope variables. Consider using `$expr`_ instead.
 |
 |      :Parameters:
 |        - `code`: JavaScript expression to use as a filter
 |
 |      .. _$expr: https://mongodb.com/docs/manual/reference/operator/query/expr/
 |      .. _$where: https://mongodb.com/docs/manual/reference/operator/query/where/
 |
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |
 |  address
 |      The (host, port) of the server used, or None.
 |
 |      .. versionchanged:: 3.0
 |         Renamed from "conn_id".
 |
 |  alive
 |      Does this cursor have the potential to return more data?
 |
 |      This is mostly useful with `tailable cursors
 |      <https://www.mongodb.com/docs/manual/core/tailable-cursors/>`_
 |      since they will stop iterating even though they *may* return more
 |      results in the future.
 |
 |      With regular cursors, simply use a for loop instead of :attr:`alive`::
 |
 |          for doc in collection.find():
 |              print(doc)
 |
 |      .. note:: Even if :attr:`alive` is True, :meth:`next` can raise
 |        :exc:`StopIteration`. :attr:`alive` can also be True while iterating
 |        a cursor from a failed server. In this case :attr:`alive` will
 |        return False after :meth:`next` fails to retrieve the next batch
 |        of results from the server.
 |
 |  cursor_id
 |      Returns the id of the cursor
 |
 |      .. versionadded:: 2.2
 |
 |  session
 |      The cursor's :class:`~pymongo.client_session.ClientSession`, or None.
 |
 |      .. versionadded:: 3.6
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from motor.core.AgnosticCursor:
 |
 |  __copy__(self)
 |
 |  __deepcopy__(self, memo)
 |
 |  clone(self)
 |      Get a clone of this cursor.
 |
 |  rewind(self)
 |      Rewind this cursor to its unevaluated state.
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from motor.core.AgnosticCursor:
 |
 |  __delegate_class__ = <class 'pymongo.cursor.Cursor'>
 |      A cursor / iterator over Mongo query results.
 |
 |
 |  __motor_class_name__ = 'MotorCursor'
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from motor.core.AgnosticBaseCursor:
 |
 |  __aiter__(self)
 |      # python.org/dev/peps/pep-0492/#api-design-and-implementation-revisions
 |
 |  async __anext__ = next(self)
 |
 |  __init__(self, cursor, collection)
 |      Don't construct a cursor yourself, but acquire one from methods like
 |      :meth:`MotorCollection.find` or :meth:`MotorCollection.aggregate`.
 |
 |      .. note::
 |        There is no need to manually close cursors; they are closed
 |        by the server after being fully iterated
 |        with :meth:`to_list`, :meth:`each`, or `async for`, or
 |        automatically closed by the client when the :class:`MotorCursor` is
 |        cleaned up by the garbage collector.
 |
 |  batch_size(self, batch_size)
 |
 |  async close(self)
 |      Explicitly kill this cursor on the server.
 |
 |      Call like::
 |
 |          await cursor.close()
 |
 |  each(self, callback)
 |      Iterates over all the documents for this cursor.
 |
 |      :meth:`each` returns immediately, and `callback` is executed asynchronously
 |      for each document. `callback` is passed ``(None, None)`` when iteration
 |      is complete.
 |
 |      Cancel iteration early by returning ``False`` from the callback. (Only
 |      ``False`` cancels iteration: returning ``None`` or 0 does not.)
 |
 |      .. testsetup:: each
 |
 |         from tornado.ioloop import IOLoop
 |         MongoClient().test.test_collection.delete_many({})
 |         MongoClient().test.test_collection.insert_many(
 |             [{'_id': i} for i in range(5)])
 |
 |         collection = MotorClient().test.test_collection
 |
 |      .. doctest:: each
 |
 |         >>> def each(result, error):
 |         ...     if error:
 |         ...         raise error
 |         ...     elif result:
 |         ...         sys.stdout.write(str(result['_id']) + ', ')
 |         ...     else:
 |         ...         # Iteration complete
 |         ...         IOLoop.current().stop()
 |         ...         print('done')
 |         ...
 |         >>> cursor = collection.find().sort([('_id', 1)])
 |         >>> cursor.each(callback=each)
 |         >>> IOLoop.current().start()
 |         0, 1, 2, 3, 4, done
 |
 |      .. note:: Unlike other Motor methods, ``each`` requires a callback and
 |         does not return a Future, so it cannot be used in a coroutine.
 |         ``async for`` and :meth:`to_list` are much easier to use.
 |
 |      :Parameters:
 |       - `callback`: function taking (document, error)
 |
 |  get_io_loop(self)
 |
 |  async next(self)
 |      Advance the cursor.
 |
 |      .. versionadded:: 2.2
 |
 |  next_object(self)
 |      **DEPRECATED** - Get a document from the most recently fetched
 |      batch, or ``None``. See :attr:`fetch_next`.
 |
 |      The :meth:`next_object` method is deprecated and may be removed
 |      in a future major release. Use `async for` to elegantly iterate over
 |      :class:`MotorCursor` objects instead.
 |
 |      .. versionchanged:: 2.2
 |         Deprecated.
 |
 |  to_list(self, length)
 |      Get a list of documents.
 |
 |      .. testsetup:: to_list
 |
 |        MongoClient().test.test_collection.delete_many({})
 |        MongoClient().test.test_collection.insert_many([{'_id': i} for i in range(4)])
 |
 |        from tornado import ioloop
 |
 |      .. doctest:: to_list
 |
 |        >>> from motor.motor_tornado import MotorClient
 |        >>> collection = MotorClient().test.test_collection
 |        >>>
 |        >>> async def f():
 |        ...     cursor = collection.find().sort([('_id', 1)])
 |        ...     docs = await cursor.to_list(length=2)
 |        ...     while docs:
 |        ...         print(docs)
 |        ...         docs = await cursor.to_list(length=2)
 |        ...
 |        ...     print('done')
 |        ...
 |        >>> ioloop.IOLoop.current().run_sync(f)
 |        [{'_id': 0}, {'_id': 1}]
 |        [{'_id': 2}, {'_id': 3}]
 |        done
 |
 |      :Parameters:
 |       - `length`: maximum number of documents to return for this call, or
 |         None
 |
 |       Returns a Future.
 |
 |      .. versionchanged:: 2.0
 |         No longer accepts a callback argument.
 |
 |      .. versionchanged:: 0.2
 |         `callback` must be passed as a keyword argument, like
 |         ``to_list(10, callback=callback)``, and the
 |         `length` parameter is no longer optional.
 |
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from motor.core.AgnosticBaseCursor:
 |
 |  fetch_next
 |      **DEPRECATED** - A Future used with `gen.coroutine`_ to
 |      asynchronously retrieve the next document in the result set,
 |      fetching a batch of documents from the server if necessary.
 |      Resolves to ``False`` if there are no more documents, otherwise
 |      :meth:`next_object` is guaranteed to return a document:
 |
 |      .. doctest:: fetch_next
 |         :hide:
 |
 |         >>> _ = MongoClient().test.test_collection.delete_many({})
 |         >>> collection = MotorClient().test.test_collection
 |
 |      .. attention:: The :attr:`fetch_next` property is deprecated and will
 |         be removed in Motor 3.0. Use `async for` to iterate elegantly and
 |         efficiently over :class:`MotorCursor` objects instead.:
 |
 |         .. doctest:: fetch_next
 |
 |            >>> async def f():
 |            ...     await collection.drop()
 |            ...     await collection.insert_many([{'_id': i} for i in range(5)])
 |            ...     async for doc in collection.find():
 |            ...         sys.stdout.write(str(doc['_id']) + ', ')
 |            ...     print('done')
 |            ...
 |            >>> IOLoop.current().run_sync(f)
 |            0, 1, 2, 3, 4, done
 |
 |      While it appears that fetch_next retrieves each document from
 |      the server individually, the cursor actually fetches documents
 |      efficiently in `large batches`_. Example usage:
 |
 |      .. doctest:: fetch_next
 |
 |         >>> async def f():
 |         ...     await collection.drop()
 |         ...     await collection.insert_many([{'_id': i} for i in range(5)])
 |         ...     cursor = collection.find().sort([('_id', 1)])
 |         ...     while (await cursor.fetch_next):
 |         ...         doc = cursor.next_object()
 |         ...         sys.stdout.write(str(doc['_id']) + ', ')
 |         ...     print('done')
 |         ...
 |         >>> IOLoop.current().run_sync(f)
 |         0, 1, 2, 3, 4, done
 |
 |      .. versionchanged:: 2.2
 |         Deprecated.
 |
 |      .. _`large batches`: https://www.mongodb.com/docs/manual/tutorial/iterate-a-cursor/#cursor-batches
 |      .. _`gen.coroutine`: http://tornadoweb.org/en/stable/gen.html
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from motor.core.AgnosticBase:
 |
 |  __eq__(self, other)
 |      Return self==value.
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from motor.core.AgnosticBase:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from motor.core.AgnosticBase:
 |
 |  __hash__ = None
